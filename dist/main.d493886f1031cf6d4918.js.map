{"version":3,"sources":["webpack:///main.d493886f1031cf6d4918.js","webpack:///./src/index.js","webpack:///./src/api/userApi.js","webpack:///./src/api/baseUrl.js","webpack:///./~/numeral/numeral.js"],"names":["webpackJsonp","module","exports","__webpack_require__","global","_interopRequireDefault","obj","__esModule","default","_userApi","_numeral","getUsers","then","result","usersBody","forEach","user","id","firstName","lastName","email","document","getElementById","innerHTML","deleteLinks","getElementsByClassName","console","log","Array","from","link","onclick","event","element","target","preventDefault","deleteUser","attributes","value","row","parentNode","removeChild","call","this","get","del","url","fetch","baseUrl","onSuccess","onError","request","Request","method","response","json","error","Object","defineProperty","_baseUrl","_baseUrl2","getBaseUrl","getQueryStringParameterByName","name","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Numeral","number","_value","toFixed","precision","roundingFunction","optionals","optionalsRegExp","output","power","Math","pow","formatNumeral","n","format","indexOf","formatCurrency","formatPercentage","formatTime","formatNumber","unformatNumeral","string","thousandRegExp","millionRegExp","billionRegExp","trillionRegExp","stringOriginal","suffixes","bytesMultiplier","unformatTime","zeroFormat","languages","currentLanguage","delimiters","decimal","abbreviations","thousand","currency","symbol","million","billion","trillion","length","match","split","min","Number","ceil","spliceIndex","symbolIndex","openParenIndex","minusSignIndex","space","splice","join","hours","floor","minutes","seconds","round","timeArray","max","w","thousands","negP","signed","optDec","abbr","abbrK","abbrM","abbrB","abbrT","abbrForce","bytes","ord","abs","d","neg","slice","ordinal","toString","loadLanguage","key","values","multiplier","x","parts","correctionFactor","args","prototype","arguments","reduce","prev","next","mp","mn","Infinity","numeral","VERSION","defaultFormat","hasModule","input","isNumeral","fn","unformat","version","language","Error","languageData","b","callback","opt_initialValue","TypeError","index","isValueSet","hasOwnProperty","clone","inputString","undefined","valueOf","set","add","cback","accum","curr","currI","O","corrFactor","subtract","multiply","divide","difference","ender","apply"],"mappings":"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","file":"main.d493886f1031cf6d4918.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\t__webpack_require__(1);\n\t\n\tvar _userApi = __webpack_require__(3);\n\t\n\tvar _numeral = __webpack_require__(6);\n\t\n\tvar _numeral2 = _interopRequireDefault(_numeral);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t(0, _userApi.getUsers)().then(function (result) {\n\t\tvar usersBody = \"\";\n\t\n\t\tresult.forEach(function (user) {\n\t\t\tusersBody += '<tr>\\n\\t\\t\\t<td><a href=\"#\" data-id=\"' + user.id + '\" class=\"deleteUser\">Delete</a></td>\\n\\t\\t\\t<td>' + user.id + '</td>\\n\\t\\t\\t<td>' + user.firstName + '</td>\\n\\t\\t\\t<td>' + user.lastName + '</td>\\n\\t\\t\\t<td>' + user.email + '</td>\\n\\t\\t\\t</tr>';\n\t\t});\n\t\n\t\tglobal.document.getElementById('users').innerHTML = usersBody;\n\t\n\t\tvar deleteLinks = global.document.getElementsByClassName('deleteUser');\n\t\tconsole.log(\"deleteLinks\" + deleteLinks);\n\t\tArray.from(deleteLinks, function (link) {\n\t\t\tlink.onclick = function (event) {\n\t\t\t\tvar element = event.target;\n\t\t\t\tevent.preventDefault();\n\t\t\t\t(0, _userApi.deleteUser)(element.attributes[\"data-id\"].value);\n\t\t\t\tvar row = element.parentNode.parentNode;\n\t\t\t\trow.parentNode.removeChild(row);\n\t\t\t};\n\t\t});\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 2 */,\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.getUsers = getUsers;\n\texports.deleteUser = deleteUser;\n\t\n\t__webpack_require__(4);\n\t\n\tvar _baseUrl = __webpack_require__(5);\n\t\n\tvar _baseUrl2 = _interopRequireDefault(_baseUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar baseUrl = (0, _baseUrl2.default)();\n\t\n\tfunction getUsers() {\n\t\treturn get('users');\n\t}\n\t\n\tfunction deleteUser(id) {\n\t\treturn del('users/' + id);\n\t}\n\t\n\tfunction get(url) {\n\t\treturn fetch(baseUrl + url).then(onSuccess, onError);\n\t}\n\t\n\tfunction del(url) {\n\t\tvar request = new Request(baseUrl + url, {\n\t\t\tmethod: 'DELETE'\n\t\t});\n\t\n\t\treturn fetch(request).then(onSuccess, onError);\n\t}\n\t\n\tfunction onSuccess(response) {\n\t\treturn response.json();\n\t}\n\t\n\tfunction onError(error) {\n\t\tconsole.log(error);\n\t}\n\n/***/ },\n/* 4 */,\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBaseUrl;\n\tfunction getBaseUrl() {\n\t  return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : '/';\n\t}\n\t\n\tfunction getQueryStringParameterByName(name, url) {\n\t  if (!url) url = window.location.href;\n\t  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n\t  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n\t      results = regex.exec(url);\n\t  if (!results) return null;\n\t  if (!results[2]) return '';\n\t  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * numeral.js\n\t * version : 1.5.3\n\t * author : Adam Draper\n\t * license : MIT\n\t * http://adamwdraper.github.com/Numeral-js/\n\t */\n\t\n\t(function () {\n\t\n\t    /************************************\n\t        Constants\n\t    ************************************/\n\t\n\t    var numeral,\n\t        VERSION = '1.5.3',\n\t        // internal storage for language config files\n\t        languages = {},\n\t        currentLanguage = 'en',\n\t        zeroFormat = null,\n\t        defaultFormat = '0,0',\n\t        // check for nodeJS\n\t        hasModule = (typeof module !== 'undefined' && module.exports);\n\t\n\t\n\t    /************************************\n\t        Constructors\n\t    ************************************/\n\t\n\t\n\t    // Numeral prototype object\n\t    function Numeral (number) {\n\t        this._value = number;\n\t    }\n\t\n\t    /**\n\t     * Implementation of toFixed() that treats floats more like decimals\n\t     *\n\t     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n\t     * problems for accounting- and finance-related software.\n\t     */\n\t    function toFixed (value, precision, roundingFunction, optionals) {\n\t        var power = Math.pow(10, precision),\n\t            optionalsRegExp,\n\t            output;\n\t            \n\t        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n\t        // Multiply up by precision, round accurately, then divide and use native toFixed():\n\t        output = (roundingFunction(value * power) / power).toFixed(precision);\n\t\n\t        if (optionals) {\n\t            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n\t            output = output.replace(optionalsRegExp, '');\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    /************************************\n\t        Formatting\n\t    ************************************/\n\t\n\t    // determine what type of formatting we need to do\n\t    function formatNumeral (n, format, roundingFunction) {\n\t        var output;\n\t\n\t        // figure out what kind of format we are dealing with\n\t        if (format.indexOf('$') > -1) { // currency!!!!!\n\t            output = formatCurrency(n, format, roundingFunction);\n\t        } else if (format.indexOf('%') > -1) { // percentage\n\t            output = formatPercentage(n, format, roundingFunction);\n\t        } else if (format.indexOf(':') > -1) { // time\n\t            output = formatTime(n, format);\n\t        } else { // plain ol' numbers or bytes\n\t            output = formatNumber(n._value, format, roundingFunction);\n\t        }\n\t\n\t        // return string\n\t        return output;\n\t    }\n\t\n\t    // revert to number\n\t    function unformatNumeral (n, string) {\n\t        var stringOriginal = string,\n\t            thousandRegExp,\n\t            millionRegExp,\n\t            billionRegExp,\n\t            trillionRegExp,\n\t            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n\t            bytesMultiplier = false,\n\t            power;\n\t\n\t        if (string.indexOf(':') > -1) {\n\t            n._value = unformatTime(string);\n\t        } else {\n\t            if (string === zeroFormat) {\n\t                n._value = 0;\n\t            } else {\n\t                if (languages[currentLanguage].delimiters.decimal !== '.') {\n\t                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n\t                }\n\t\n\t                // see if abbreviations are there so that we can multiply to the correct number\n\t                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\t\n\t                // see if bytes are there so that we can multiply to the correct number\n\t                for (power = 0; power <= suffixes.length; power++) {\n\t                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\t\n\t                    if (bytesMultiplier) {\n\t                        break;\n\t                    }\n\t                }\n\t\n\t                // do some math to create our number\n\t                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\t\n\t                // round if we are talking about bytes\n\t                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n\t            }\n\t        }\n\t        return n._value;\n\t    }\n\t\n\t    function formatCurrency (n, format, roundingFunction) {\n\t        var symbolIndex = format.indexOf('$'),\n\t            openParenIndex = format.indexOf('('),\n\t            minusSignIndex = format.indexOf('-'),\n\t            space = '',\n\t            spliceIndex,\n\t            output;\n\t\n\t        // check for space before or after currency\n\t        if (format.indexOf(' $') > -1) {\n\t            space = ' ';\n\t            format = format.replace(' $', '');\n\t        } else if (format.indexOf('$ ') > -1) {\n\t            space = ' ';\n\t            format = format.replace('$ ', '');\n\t        } else {\n\t            format = format.replace('$', '');\n\t        }\n\t\n\t        // format the number\n\t        output = formatNumber(n._value, format, roundingFunction);\n\t\n\t        // position the symbol\n\t        if (symbolIndex <= 1) {\n\t            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n\t                output = output.split('');\n\t                spliceIndex = 1;\n\t                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){\n\t                    // the symbol appears before the \"(\" or \"-\"\n\t                    spliceIndex = 0;\n\t                }\n\t                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n\t                output = output.join('');\n\t            } else {\n\t                output = languages[currentLanguage].currency.symbol + space + output;\n\t            }\n\t        } else {\n\t            if (output.indexOf(')') > -1) {\n\t                output = output.split('');\n\t                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n\t                output = output.join('');\n\t            } else {\n\t                output = output + space + languages[currentLanguage].currency.symbol;\n\t            }\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatPercentage (n, format, roundingFunction) {\n\t        var space = '',\n\t            output,\n\t            value = n._value * 100;\n\t\n\t        // check for space before %\n\t        if (format.indexOf(' %') > -1) {\n\t            space = ' ';\n\t            format = format.replace(' %', '');\n\t        } else {\n\t            format = format.replace('%', '');\n\t        }\n\t\n\t        output = formatNumber(value, format, roundingFunction);\n\t        \n\t        if (output.indexOf(')') > -1 ) {\n\t            output = output.split('');\n\t            output.splice(-1, 0, space + '%');\n\t            output = output.join('');\n\t        } else {\n\t            output = output + space + '%';\n\t        }\n\t\n\t        return output;\n\t    }\n\t\n\t    function formatTime (n) {\n\t        var hours = Math.floor(n._value/60/60),\n\t            minutes = Math.floor((n._value - (hours * 60 * 60))/60),\n\t            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n\t        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n\t    }\n\t\n\t    function unformatTime (string) {\n\t        var timeArray = string.split(':'),\n\t            seconds = 0;\n\t        // turn hours and minutes into seconds and add them all up\n\t        if (timeArray.length === 3) {\n\t            // hours\n\t            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n\t            // minutes\n\t            seconds = seconds + (Number(timeArray[1]) * 60);\n\t            // seconds\n\t            seconds = seconds + Number(timeArray[2]);\n\t        } else if (timeArray.length === 2) {\n\t            // minutes\n\t            seconds = seconds + (Number(timeArray[0]) * 60);\n\t            // seconds\n\t            seconds = seconds + Number(timeArray[1]);\n\t        }\n\t        return Number(seconds);\n\t    }\n\t\n\t    function formatNumber (value, format, roundingFunction) {\n\t        var negP = false,\n\t            signed = false,\n\t            optDec = false,\n\t            abbr = '',\n\t            abbrK = false, // force abbreviation to thousands\n\t            abbrM = false, // force abbreviation to millions\n\t            abbrB = false, // force abbreviation to billions\n\t            abbrT = false, // force abbreviation to trillions\n\t            abbrForce = false, // force abbreviation\n\t            bytes = '',\n\t            ord = '',\n\t            abs = Math.abs(value),\n\t            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n\t            min,\n\t            max,\n\t            power,\n\t            w,\n\t            precision,\n\t            thousands,\n\t            d = '',\n\t            neg = false;\n\t\n\t        // check if number is zero and a custom zero format has been set\n\t        if (value === 0 && zeroFormat !== null) {\n\t            return zeroFormat;\n\t        } else {\n\t            // see if we should use parentheses for negative number or if we should prefix with a sign\n\t            // if both are present we default to parentheses\n\t            if (format.indexOf('(') > -1) {\n\t                negP = true;\n\t                format = format.slice(1, -1);\n\t            } else if (format.indexOf('+') > -1) {\n\t                signed = true;\n\t                format = format.replace(/\\+/g, '');\n\t            }\n\t\n\t            // see if abbreviation is wanted\n\t            if (format.indexOf('a') > -1) {\n\t                // check if abbreviation is specified\n\t                abbrK = format.indexOf('aK') >= 0;\n\t                abbrM = format.indexOf('aM') >= 0;\n\t                abbrB = format.indexOf('aB') >= 0;\n\t                abbrT = format.indexOf('aT') >= 0;\n\t                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\t\n\t                // check for space before abbreviation\n\t                if (format.indexOf(' a') > -1) {\n\t                    abbr = ' ';\n\t                    format = format.replace(' a', '');\n\t                } else {\n\t                    format = format.replace('a', '');\n\t                }\n\t\n\t                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n\t                    // trillion\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n\t                    value = value / Math.pow(10, 12);\n\t                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n\t                    // billion\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n\t                    value = value / Math.pow(10, 9);\n\t                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n\t                    // million\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n\t                    value = value / Math.pow(10, 6);\n\t                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n\t                    // thousand\n\t                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n\t                    value = value / Math.pow(10, 3);\n\t                }\n\t            }\n\t\n\t            // see if we are formatting bytes\n\t            if (format.indexOf('b') > -1) {\n\t                // check for space before\n\t                if (format.indexOf(' b') > -1) {\n\t                    bytes = ' ';\n\t                    format = format.replace(' b', '');\n\t                } else {\n\t                    format = format.replace('b', '');\n\t                }\n\t\n\t                for (power = 0; power <= suffixes.length; power++) {\n\t                    min = Math.pow(1024, power);\n\t                    max = Math.pow(1024, power+1);\n\t\n\t                    if (value >= min && value < max) {\n\t                        bytes = bytes + suffixes[power];\n\t                        if (min > 0) {\n\t                            value = value / min;\n\t                        }\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // see if ordinal is wanted\n\t            if (format.indexOf('o') > -1) {\n\t                // check for space before\n\t                if (format.indexOf(' o') > -1) {\n\t                    ord = ' ';\n\t                    format = format.replace(' o', '');\n\t                } else {\n\t                    format = format.replace('o', '');\n\t                }\n\t\n\t                ord = ord + languages[currentLanguage].ordinal(value);\n\t            }\n\t\n\t            if (format.indexOf('[.]') > -1) {\n\t                optDec = true;\n\t                format = format.replace('[.]', '.');\n\t            }\n\t\n\t            w = value.toString().split('.')[0];\n\t            precision = format.split('.')[1];\n\t            thousands = format.indexOf(',');\n\t\n\t            if (precision) {\n\t                if (precision.indexOf('[') > -1) {\n\t                    precision = precision.replace(']', '');\n\t                    precision = precision.split('[');\n\t                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n\t                } else {\n\t                    d = toFixed(value, precision.length, roundingFunction);\n\t                }\n\t\n\t                w = d.split('.')[0];\n\t\n\t                if (d.split('.')[1].length) {\n\t                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n\t                } else {\n\t                    d = '';\n\t                }\n\t\n\t                if (optDec && Number(d.slice(1)) === 0) {\n\t                    d = '';\n\t                }\n\t            } else {\n\t                w = toFixed(value, null, roundingFunction);\n\t            }\n\t\n\t            // format number\n\t            if (w.indexOf('-') > -1) {\n\t                w = w.slice(1);\n\t                neg = true;\n\t            }\n\t\n\t            if (thousands > -1) {\n\t                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n\t            }\n\t\n\t            if (format.indexOf('.') === 0) {\n\t                w = '';\n\t            }\n\t\n\t            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n\t        }\n\t    }\n\t\n\t    /************************************\n\t        Top Level Functions\n\t    ************************************/\n\t\n\t    numeral = function (input) {\n\t        if (numeral.isNumeral(input)) {\n\t            input = input.value();\n\t        } else if (input === 0 || typeof input === 'undefined') {\n\t            input = 0;\n\t        } else if (!Number(input)) {\n\t            input = numeral.fn.unformat(input);\n\t        }\n\t\n\t        return new Numeral(Number(input));\n\t    };\n\t\n\t    // version number\n\t    numeral.version = VERSION;\n\t\n\t    // compare numeral object\n\t    numeral.isNumeral = function (obj) {\n\t        return obj instanceof Numeral;\n\t    };\n\t\n\t    // This function will load languages and then set the global language.  If\n\t    // no arguments are passed in, it will simply return the current global\n\t    // language key.\n\t    numeral.language = function (key, values) {\n\t        if (!key) {\n\t            return currentLanguage;\n\t        }\n\t\n\t        if (key && !values) {\n\t            if(!languages[key]) {\n\t                throw new Error('Unknown language : ' + key);\n\t            }\n\t            currentLanguage = key;\n\t        }\n\t\n\t        if (values || !languages[key]) {\n\t            loadLanguage(key, values);\n\t        }\n\t\n\t        return numeral;\n\t    };\n\t    \n\t    // This function provides access to the loaded language data.  If\n\t    // no arguments are passed in, it will simply return the current\n\t    // global language object.\n\t    numeral.languageData = function (key) {\n\t        if (!key) {\n\t            return languages[currentLanguage];\n\t        }\n\t        \n\t        if (!languages[key]) {\n\t            throw new Error('Unknown language : ' + key);\n\t        }\n\t        \n\t        return languages[key];\n\t    };\n\t\n\t    numeral.language('en', {\n\t        delimiters: {\n\t            thousands: ',',\n\t            decimal: '.'\n\t        },\n\t        abbreviations: {\n\t            thousand: 'k',\n\t            million: 'm',\n\t            billion: 'b',\n\t            trillion: 't'\n\t        },\n\t        ordinal: function (number) {\n\t            var b = number % 10;\n\t            return (~~ (number % 100 / 10) === 1) ? 'th' :\n\t                (b === 1) ? 'st' :\n\t                (b === 2) ? 'nd' :\n\t                (b === 3) ? 'rd' : 'th';\n\t        },\n\t        currency: {\n\t            symbol: '$'\n\t        }\n\t    });\n\t\n\t    numeral.zeroFormat = function (format) {\n\t        zeroFormat = typeof(format) === 'string' ? format : null;\n\t    };\n\t\n\t    numeral.defaultFormat = function (format) {\n\t        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n\t    };\n\t\n\t    /************************************\n\t        Helpers\n\t    ************************************/\n\t\n\t    function loadLanguage(key, values) {\n\t        languages[key] = values;\n\t    }\n\t\n\t    /************************************\n\t        Floating-point helpers\n\t    ************************************/\n\t\n\t    // The floating-point helper functions and implementation\n\t    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\t\n\t    /**\n\t     * Array.prototype.reduce for browsers that don't support it\n\t     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n\t     */\n\t    if ('function' !== typeof Array.prototype.reduce) {\n\t        Array.prototype.reduce = function (callback, opt_initialValue) {\n\t            'use strict';\n\t            \n\t            if (null === this || 'undefined' === typeof this) {\n\t                // At the moment all modern browsers, that support strict mode, have\n\t                // native implementation of Array.prototype.reduce. For instance, IE8\n\t                // does not support strict mode, so this check is actually useless.\n\t                throw new TypeError('Array.prototype.reduce called on null or undefined');\n\t            }\n\t            \n\t            if ('function' !== typeof callback) {\n\t                throw new TypeError(callback + ' is not a function');\n\t            }\n\t\n\t            var index,\n\t                value,\n\t                length = this.length >>> 0,\n\t                isValueSet = false;\n\t\n\t            if (1 < arguments.length) {\n\t                value = opt_initialValue;\n\t                isValueSet = true;\n\t            }\n\t\n\t            for (index = 0; length > index; ++index) {\n\t                if (this.hasOwnProperty(index)) {\n\t                    if (isValueSet) {\n\t                        value = callback(value, this[index], index, this);\n\t                    } else {\n\t                        value = this[index];\n\t                        isValueSet = true;\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (!isValueSet) {\n\t                throw new TypeError('Reduce of empty array with no initial value');\n\t            }\n\t\n\t            return value;\n\t        };\n\t    }\n\t\n\t    \n\t    /**\n\t     * Computes the multiplier necessary to make x >= 1,\n\t     * effectively eliminating miscalculations caused by\n\t     * finite precision.\n\t     */\n\t    function multiplier(x) {\n\t        var parts = x.toString().split('.');\n\t        if (parts.length < 2) {\n\t            return 1;\n\t        }\n\t        return Math.pow(10, parts[1].length);\n\t    }\n\t\n\t    /**\n\t     * Given a variable number of arguments, returns the maximum\n\t     * multiplier that must be used to normalize an operation involving\n\t     * all of them.\n\t     */\n\t    function correctionFactor() {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        return args.reduce(function (prev, next) {\n\t            var mp = multiplier(prev),\n\t                mn = multiplier(next);\n\t        return mp > mn ? mp : mn;\n\t        }, -Infinity);\n\t    }        \n\t\n\t\n\t    /************************************\n\t        Numeral Prototype\n\t    ************************************/\n\t\n\t\n\t    numeral.fn = Numeral.prototype = {\n\t\n\t        clone : function () {\n\t            return numeral(this);\n\t        },\n\t\n\t        format : function (inputString, roundingFunction) {\n\t            return formatNumeral(this, \n\t                  inputString ? inputString : defaultFormat, \n\t                  (roundingFunction !== undefined) ? roundingFunction : Math.round\n\t              );\n\t        },\n\t\n\t        unformat : function (inputString) {\n\t            if (Object.prototype.toString.call(inputString) === '[object Number]') { \n\t                return inputString; \n\t            }\n\t            return unformatNumeral(this, inputString ? inputString : defaultFormat);\n\t        },\n\t\n\t        value : function () {\n\t            return this._value;\n\t        },\n\t\n\t        valueOf : function () {\n\t            return this._value;\n\t        },\n\t\n\t        set : function (value) {\n\t            this._value = Number(value);\n\t            return this;\n\t        },\n\t\n\t        add : function (value) {\n\t            var corrFactor = correctionFactor.call(null, this._value, value);\n\t            function cback(accum, curr, currI, O) {\n\t                return accum + corrFactor * curr;\n\t            }\n\t            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n\t            return this;\n\t        },\n\t\n\t        subtract : function (value) {\n\t            var corrFactor = correctionFactor.call(null, this._value, value);\n\t            function cback(accum, curr, currI, O) {\n\t                return accum - corrFactor * curr;\n\t            }\n\t            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            \n\t            return this;\n\t        },\n\t\n\t        multiply : function (value) {\n\t            function cback(accum, curr, currI, O) {\n\t                var corrFactor = correctionFactor(accum, curr);\n\t                return (accum * corrFactor) * (curr * corrFactor) /\n\t                    (corrFactor * corrFactor);\n\t            }\n\t            this._value = [this._value, value].reduce(cback, 1);\n\t            return this;\n\t        },\n\t\n\t        divide : function (value) {\n\t            function cback(accum, curr, currI, O) {\n\t                var corrFactor = correctionFactor(accum, curr);\n\t                return (accum * corrFactor) / (curr * corrFactor);\n\t            }\n\t            this._value = [this._value, value].reduce(cback);            \n\t            return this;\n\t        },\n\t\n\t        difference : function (value) {\n\t            return Math.abs(numeral(this._value).subtract(value).value());\n\t        }\n\t\n\t    };\n\t\n\t    /************************************\n\t        Exposing Numeral\n\t    ************************************/\n\t\n\t    // CommonJS module is defined\n\t    if (hasModule) {\n\t        module.exports = numeral;\n\t    }\n\t\n\t    /*global ender:false */\n\t    if (typeof ender === 'undefined') {\n\t        // here, `this` means `window` in the browser, or `global` on the server\n\t        // add `numeral` as a global object via a string identifier,\n\t        // for Closure Compiler 'advanced' mode\n\t        this['numeral'] = numeral;\n\t    }\n\t\n\t    /*global define:false */\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t            return numeral;\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t}).call(this);\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.d493886f1031cf6d4918.js\n **/","import './index.css'\nimport {getUsers, deleteUser} from './api/userApi'\nimport numeral from 'numeral';\n\ngetUsers().then(result => {\n\tlet usersBody = \"\";\n\n\tresult.forEach(user => {\n\t\tusersBody+= `<tr>\n\t\t\t<td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\n\t\t\t<td>${user.id}</td>\n\t\t\t<td>${user.firstName}</td>\n\t\t\t<td>${user.lastName}</td>\n\t\t\t<td>${user.email}</td>\n\t\t\t</tr>`\n\t});\n\n\tglobal.document.getElementById('users').innerHTML = usersBody;\n\n\tconst deleteLinks = global.document.getElementsByClassName('deleteUser');\n\tconsole.log(\"deleteLinks\" + deleteLinks);\n\tArray.from(deleteLinks, link => {\n\t\tlink.onclick = function(event) {\n\t\t\tconst element = event.target;\n\t\t\tevent.preventDefault();\n\t\t\tdeleteUser(element.attributes[\"data-id\"].value);\n\t\t\tconst row = element.parentNode.parentNode;\n\t\t\trow.parentNode.removeChild(row);\n\t\t};\n\t});\n})\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import 'whatwg-fetch';\nimport getBaseUrl from './baseUrl';\n\nconst baseUrl = getBaseUrl();\n\nexport function getUsers() {\n\treturn get('users');\n}\n\nexport function deleteUser(id) {\n\treturn del(`users/${id}`);\n}\n\nfunction get(url) {\n\treturn fetch(baseUrl + url).then(onSuccess, onError);\n}\n\nfunction del(url) {\n\tconst request = new Request(baseUrl + url, {\n\t\tmethod: 'DELETE'\n\t});\n\n\treturn fetch(request).then(onSuccess, onError);\n}\n\nfunction onSuccess(response) {\n\treturn response.json();\n}\n\nfunction onError(error) {\n\tconsole.log(error);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/userApi.js\n **/","export default function getBaseUrl() {\n\treturn getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : '/';\n}\n\nfunction getQueryStringParameterByName(name, url) {\n\tif (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/baseUrl.js\n **/","/*!\n * numeral.js\n * version : 1.5.3\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function () {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numeral,\n        VERSION = '1.5.3',\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n        zeroFormat = null,\n        defaultFormat = '0,0',\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral (number) {\n        this._value = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed (value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n            \n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(precision);\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral (n, format, roundingFunction) {\n        var output;\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(n, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(n, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(n, format);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(n._value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }\n\n    // revert to number\n    function unformatNumeral (n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            bytesMultiplier = false,\n            power;\n\n        if (string.indexOf(':') > -1) {\n            n._value = unformatTime(string);\n        } else {\n            if (string === zeroFormat) {\n                n._value = 0;\n            } else {\n                if (languages[currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 0; power <= suffixes.length; power++) {\n                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\n                // round if we are talking about bytes\n                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n            }\n        }\n        return n._value;\n    }\n\n    function formatCurrency (n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage (n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n        \n        if (output.indexOf(')') > -1 ) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatTime (n) {\n        var hours = Math.floor(n._value/60/60),\n            minutes = Math.floor((n._value - (hours * 60 * 60))/60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function unformatTime (string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n    function formatNumber (value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        } else {\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (format.indexOf('(') > -1) {\n                negP = true;\n                format = format.slice(1, -1);\n            } else if (format.indexOf('+') > -1) {\n                signed = true;\n                format = format.replace(/\\+/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (format.indexOf('a') > -1) {\n                // check if abbreviation is specified\n                abbrK = format.indexOf('aK') >= 0;\n                abbrM = format.indexOf('aM') >= 0;\n                abbrB = format.indexOf('aB') >= 0;\n                abbrT = format.indexOf('aT') >= 0;\n                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n                // check for space before abbreviation\n                if (format.indexOf(' a') > -1) {\n                    abbr = ' ';\n                    format = format.replace(' a', '');\n                } else {\n                    format = format.replace('a', '');\n                }\n\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n\n            // see if we are formatting bytes\n            if (format.indexOf('b') > -1) {\n                // check for space before\n                if (format.indexOf(' b') > -1) {\n                    bytes = ' ';\n                    format = format.replace(' b', '');\n                } else {\n                    format = format.replace('b', '');\n                }\n\n                for (power = 0; power <= suffixes.length; power++) {\n                    min = Math.pow(1024, power);\n                    max = Math.pow(1024, power+1);\n\n                    if (value >= min && value < max) {\n                        bytes = bytes + suffixes[power];\n                        if (min > 0) {\n                            value = value / min;\n                        }\n                        break;\n                    }\n                }\n            }\n\n            // see if ordinal is wanted\n            if (format.indexOf('o') > -1) {\n                // check for space before\n                if (format.indexOf(' o') > -1) {\n                    ord = ' ';\n                    format = format.replace(' o', '');\n                } else {\n                    format = format.replace('o', '');\n                }\n\n                ord = ord + languages[currentLanguage].ordinal(value);\n            }\n\n            if (format.indexOf('[.]') > -1) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            w = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n\n            if (precision) {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n\n                w = d.split('.')[0];\n\n                if (d.split('.')[1].length) {\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n                } else {\n                    d = '';\n                }\n\n                if (optDec && Number(d.slice(1)) === 0) {\n                    d = '';\n                }\n            } else {\n                w = toFixed(value, null, roundingFunction);\n            }\n\n            // format number\n            if (w.indexOf('-') > -1) {\n                w = w.slice(1);\n                neg = true;\n            }\n\n            if (thousands > -1) {\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                w = '';\n            }\n\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function (input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (!Number(input)) {\n            input = numeral.fn.unformat(input);\n        }\n\n        return new Numeral(Number(input));\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function (obj) {\n        return obj instanceof Numeral;\n    };\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function (key, values) {\n        if (!key) {\n            return currentLanguage;\n        }\n\n        if (key && !values) {\n            if(!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n    \n    // This function provides access to the loaded language data.  If\n    // no arguments are passed in, it will simply return the current\n    // global language object.\n    numeral.languageData = function (key) {\n        if (!key) {\n            return languages[currentLanguage];\n        }\n        \n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n        \n        return languages[key];\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function (format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function (format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n    /************************************\n        Floating-point helpers\n    ************************************/\n\n    // The floating-point helper functions and implementation\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\n    /**\n     * Array.prototype.reduce for browsers that don't support it\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n     */\n    if ('function' !== typeof Array.prototype.reduce) {\n        Array.prototype.reduce = function (callback, opt_initialValue) {\n            'use strict';\n            \n            if (null === this || 'undefined' === typeof this) {\n                // At the moment all modern browsers, that support strict mode, have\n                // native implementation of Array.prototype.reduce. For instance, IE8\n                // does not support strict mode, so this check is actually useless.\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n            \n            if ('function' !== typeof callback) {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var index,\n                value,\n                length = this.length >>> 0,\n                isValueSet = false;\n\n            if (1 < arguments.length) {\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n\n            for (index = 0; length > index; ++index) {\n                if (this.hasOwnProperty(index)) {\n                    if (isValueSet) {\n                        value = callback(value, this[index], index, this);\n                    } else {\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n\n            if (!isValueSet) {\n                throw new TypeError('Reduce of empty array with no initial value');\n            }\n\n            return value;\n        };\n    }\n\n    \n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function (prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n        return mp > mn ? mp : mn;\n        }, -Infinity);\n    }        \n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone : function () {\n            return numeral(this);\n        },\n\n        format : function (inputString, roundingFunction) {\n            return formatNumeral(this, \n                  inputString ? inputString : defaultFormat, \n                  (roundingFunction !== undefined) ? roundingFunction : Math.round\n              );\n        },\n\n        unformat : function (inputString) {\n            if (Object.prototype.toString.call(inputString) === '[object Number]') { \n                return inputString; \n            }\n            return unformatNumeral(this, inputString ? inputString : defaultFormat);\n        },\n\n        value : function () {\n            return this._value;\n        },\n\n        valueOf : function () {\n            return this._value;\n        },\n\n        set : function (value) {\n            this._value = Number(value);\n            return this;\n        },\n\n        add : function (value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n            function cback(accum, curr, currI, O) {\n                return accum + corrFactor * curr;\n            }\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n            return this;\n        },\n\n        subtract : function (value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n            function cback(accum, curr, currI, O) {\n                return accum - corrFactor * curr;\n            }\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            \n            return this;\n        },\n\n        multiply : function (value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) * (curr * corrFactor) /\n                    (corrFactor * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback, 1);\n            return this;\n        },\n\n        divide : function (value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback);            \n            return this;\n        },\n\n        difference : function (value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return numeral;\n        });\n    }\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/numeral/numeral.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}